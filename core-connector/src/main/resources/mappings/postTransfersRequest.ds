//local formatDate(dateStr) = DS.ZonedDateTime.format(dateStr, "yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSSVV", "yyyy-MM-dd'T'HH:mm:ss.SSSVV");

local hasChannelReferenceId = if (std.objectHas(payload.to, "extensionList")) then
std.filter(function(extension) std.objectHas(extension, "key") && extension.key == "channelReferenceId", payload.to.extensionList) else [];
local channelReferenceId = if (hasChannelReferenceId != []) then hasChannelReferenceId[0].value else "";

//local hasBillerReferenceFilter(obj) = std.objectHas(obj, "key") && obj.key == "billerReferenceId";
local hasBillerReference = if (std.objectHas(payload.to, "extensionList")) then
std.filter(function(extension) std.objectHas(extension, "key") && extension.key == "billerReferenceId", payload.to.extensionList) else [];
local billerReferenceId = if (hasBillerReference != []) then hasBillerReference[0].value else "";

//local hasBillerReferenceId2 = if (std.objectHas(payload.to, "extensionList")) then [{
//  [if (std.objectHas(extension, "key") && extension.key == "billerReferenceId")
//  then "billerReferenceId"]: extension.value
//} for extension in payload.to.extensionList] else [];
//local billerReferenceId2 = if (hasBillerReferenceId2 != []) then hasBillerReferenceId2[0].billerReferenceId else "";

{
  "channelReferenceId": channelReferenceId,
  "billerReferenceId": billerReferenceId,
//  "billerReferenceId2": billerReferenceId2,
  "channelPaymentDetails": {
    "paymentTransactionId": payload.transferId,
    "transactionAmount": std.parseJson(payload.amount),
    "transactionStatus": "SUCCESS",
    "transactionDate": exchangeProperty.timeStamp,
    [if (std.objectHas(payload, "note") && payload.note != null)
     then "transactionRemarks"]: payload.note
  }
}